// public/embed.min.js

(function () {
    // Configuration for the chatbot
    const config = window.embeddedChatbotConfig || {};

    // Reference to the playground chatbot API
    const playgroundChatbotId = config.chatbotId || 'defaultChatbotId'; // Use a default if not provided

    // Create a chat widget container
    const chatContainer = document.createElement('div');
    chatContainer.id = 'chatbot-widget';
    document.body.appendChild(chatContainer);

    // Add <br> after each line in the chat widget
    const addLineBreaks = (content) => {
        return content.split('\n').join('');
    };

    // Add mobile styles
    const chatbotStyles = `
        #close-button {        
            cursor: pointer;
            position: absolute;
            top: 14px;
            right: 10px;
            font-size: 24px;
            &:hover {
                color: rgb(159 166 179);
            }
        }
        #chatbot-widget-icon {        
            position: fixed;
            bottom: 20px;
            right: 20px;
            font-size: 30px;
            cursor: pointer;
            background: black;
            border-radius: 100px;
            z-index: 1001;
            width: 55px;
            height: 55px;            
            display: flex;
            justify-content: center;
            align-items: center;

            &:hover {
                background: #212020;
            }
        }
        #chatbot-widget {    
            position: fixed;
            flex-direction: column;
            justify-content: space-between;
            box-shadow: rgba(150, 150, 150, 0.2) 0px 10px 30px 0px, rgba(150, 150, 150, 0.2) 0px 0px 0px 1px;
            bottom: 5rem;
            right: 1rem;
            width: 448px;
            height: 85dvh;
            max-height: 824px;
            border-radius: 0.75rem;
            display: block;
            z-index: 2147483646;
            overflow: hidden;
            background-color: white;
            left: unset;
            top: unset;
            @media (max-width: 640px) {
                border: none;
                position: fixed;
                flex-direction: column;
                justify-content: space-between;
                box-shadow: rgba(150, 150, 150, 0.2) 0px 10px 30px 0px, rgba(150, 150, 150, 0.2) 0px 0px 0px 1px;
                bottom: 0px;
                right: 0px;
                width: 100%;
                height: 100vh;
                max-height: 100vh;
                border-radius: 0px;
                display: flex;
                z-index: 2147483646;
                overflow: hidden;
                background-color: white;
                left: unset;
                top: 0px;
            }
        }
    `;
    const styleSheet = document.createElement("style");
    styleSheet.innerText = addLineBreaks(chatbotStyles);
    document.head.appendChild(styleSheet);

    // Create a chat icon
    const chatIcon = document.createElement('div');
    chatIcon.innerHTML = '<div>ðŸ’¬</div>'; // You can use an icon or emoji
    chatIcon.id = 'chatbot-widget-icon';
    document.body.appendChild(chatIcon);

    // Create an iframe for the chatbot content
    const chatIframe = document.createElement('iframe');
    chatIframe.style.width = '100%'; // Full width of the container
    chatIframe.style.height = '100%'; // Full height of the container
    chatIframe.style.border = 'none'; // No border
    chatIframe.src = `http://${window.embeddedChatbotConfig.domain}/chatbot/${playgroundChatbotId}`; // Set the source to the chatbot URL
    chatContainer.appendChild(chatIframe); // Append the iframe to the chat container

    // Create a close button
    const closeButton = document.createElement('div');
    closeButton.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" width="30" height="30" viewBox="0 0 30 30" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-x h-full w-full p-1"><path d="M18 6 6 18"></path><path d="m6 6 12 12"></path></svg>`; // Close icon (you can replace this with an SVG or other icon)
    // closeButton.innerHTML = 'âœ–'; // Close icon (you can replace this with an SVG or other icon)
    closeButton.id = 'close-button';
    chatContainer.appendChild(closeButton); // Append the close button to the chat container

    // Function to toggle chat window visibility
    async function toggleChatWindow() {
        if (chatContainer.style.display === 'none' || chatContainer.style.display === '') {
            chatContainer.style.display = 'block'; // Show chat window
            chatIcon.innerHTML = `<svg id="closeIcon" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="2.3" stroke="white" width="24" height="24">
                <path stroke-linecap="round" stroke-linejoin="round" d="M19.5 8.25l-7.5 7.5-7.5-7.5"></path>
                </svg>`;
            document.getElementsByTagName('body')[0].style.overflow='hidden';
        } else {
            chatContainer.style.display = 'none'; // Hide chat window
            chatIcon.innerHTML = '<div>ðŸ’¬</div>'; // You can use an icon or emoji
            document.getElementsByTagName('body')[0].style.overflowY='scroll';
        }
    }

    // Add event listener to close button
    closeButton.addEventListener('click', () => {
        chatContainer.style.display = 'none'; // Hide chat window
        chatIcon.innerHTML = '<div>ðŸ’¬</div>'; // Reset chat icon
        document.getElementsByTagName('body')[0].style.overflowY='scroll'; // Restore body scroll
    });

    // Initially hide the chat window
    chatContainer.style.display = 'none';

    // Add event listener to chat icon
    chatIcon.addEventListener('click', toggleChatWindow);
})();
